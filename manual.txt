IGAP4GradElast: Isogeometric Analysis Program for Gradient Elasticity

/*================================================================    BVP    ================================================================*/
Requires PETsc-3.7.4.

// ---- Logical structure:
                                      /////////////                               /////////////
         main.c                       /    IGA    /                               /    BVP    /
 .                       .            /////////////         .                     /////////////                      .
 .                       .                                  .                                                        .
 .   define:             .                                  .            --------                ----------          .
 .     par_mat[]         .                                  .           | DOMAIN |              | BOUNDARY |         .
 .     bc_type[]         .                                  .            --------                ----------          .
 .     par_neumann[]     .                                  .       Mathematica:                                     .
 .     par_dirichlet[]   .                 MESH             .       bvp/domain.nb (par_mat[])                        .
 .                       .                  ^               .              |                                         .
 .                       .                  |               .              |                                         .
 .    _PETSc-3.7.4_      .      ____________|____________   .   ___________v___________     _______________________  .
 .   |             |     .     |                         |  .  |                       |   |                       | .
 .   |  Assemble/  | --------> |  iga/compute_Residual.c --------> bvp/eval_residual.c |   |                       | .
 .   |  Solve      |     .     |                        ------------------------------------> bvp/eval_neumann.c   | .
 .   |_____________|     .     |                         |  .  |                       |   |   (par_neumann[])     | .
 .                       .     |  iga/compute_Tangent.c  --------> bvp/eval_tangent.c  |   |                       | .
 .                       .     |_________________________|  .  |                       |   |  iga/appl_dirichlet.c | .
 .                       .                                  .  |                       |   |   (par_dirichlet[])   | .
 .                       .        iga/compute_Energy.c   --------> bvp/eval_energy.c   |   |                       | .
 .                       .                                  .  |_______________________|   |_______________________| .
 .                       .                                  .                                                        .

// ---- Files to change:
    file name                 physics                  parameters             current implementation
--------------------------------------------------------------------------------------------------------------
bvp/domain.nb               free energy              par_mat[]              3-well non-convex free energy
bvp/eval_neumann.c          Neumann B.C.s            par_neumann[]          general
iga/appl_dirichlet.c        Dirichlet B.C.s          par_dirichlet[]        constant average deformation gradient

// ---- Current restrictions:
Reference configuration has to be given as a tensor product of three knot vectors (i.e. cannot be a cylinder etc...), as Jacobian evaluation is simplified.  
High-order Dirichlet B.C.s can be applied only where standard Dirichlet B.C.s are applied.
High-order Dirichlet B.C. has to be constant on each face, if ever applied.  

/*================================================================ STABILITY ================================================================*/
Requires SLEPc-3.7.3.

main_stab.c:
Checks second variations of total free energy.

/*================================================================   PLOT    ================================================================*/
Requires mathgl-3.0.

main_plot.c:

/*================================================================  EXAMPLE  ================================================================*/

The following examples were done on a 4-core laptop using 8 threads.  

Example 1-3 only use PETSc-3.7. Only "main.c" needs to be modified.
Exasmple 4 requires SLEPc-3.7. Only "main_stab.c" needs to be modified. (actually, it does not have to be modified at all)

// ---- makefile:

If SLEPc is installed the following is always fine:
#include ${PETSC_DIR}/lib/petsc/conf/variables
#include ${PETSC_DIR}/lib/petsc/conf/rules
include ${SLEPC_DIR}/lib/slepc/conf/slepc_common

If only PETSc is installed, and you jsut want to test Example 1-3, comment/uncomment lines as:
include ${PETSC_DIR}/lib/petsc/conf/variables
include ${PETSC_DIR}/lib/petsc/conf/rules
#include ${SLEPC_DIR}/lib/slepc/conf/slepc_common


// ---- Example 1: Computing a solution branch using a random initial guess.

/*==== PROBLEM SETUP ====*/

/*---- MESH ----*/
mref_base= 3;                                                      // mesh refinement level
nref     = 0;                                                      // number of further uniform refinements
mref     = mref_base+nref;                                         // 
mesh_uniform(mref)                                                 // make uniform mesh

/*---- BVP ----*/
par_mat[]={  0.25,  0.50,  585.,  180.,  0.1  };                   // parametrization of free energy. par_mat[4]=length-scale parameter.
                                                                   // go to "bvp/domain.nb" to change parametrizations.
//          ux,   uy,   uz, ux_n, uy_n, uz_n,                      // standard/high-order B.C. type : 0:Dirichlet, 1:Neumann.
bc_type[]={  0,    1,    1,    1,    1,    1,       Face 0: YZ     // This specific bc_type[] is for a material that is free to move on each surface, but not in the normal direction.
             0,    1,    1,    1,    1,    1,       Face 1: YZ   
             1,    0,    1,    1,    1,    1,       Face 2: ZX  
             1,    0,    1,    1,    1,    1,       Face 3: ZX  
             1,    1,    0,    1,    1,    1,       Face 4: XY  
             1,    1,    0,    1,    1,    1  };    Face 5: XY  
par_dirichlet[]={0.01,0.01,0.00,                                   // parametrization of Dirichlet B.C.s: current implementation is for prescribed average Grad u (=F-I).
                 0.02,0.02,0.00,                                   // go to "iga/appl_dirichlet.c" to change parametrizations. 
                 0.03,0.03,0.00 };                                 // 
par_neumann[]  ={0.00};                                            // parametrization of Neumann B.C.s:
                                                                   // go to "bvp/eval_neumann.c" to change parametrizations.
        ______________________
       /                     /|
      /          5          / |
     /_____________________/  |
     |                     |  |
   0 |                     | 1|    Z
     |          2          |  /    |  Y
     |                     | /     | /        
     | ____________________|/      |/____X    

/*---- IGA ----*/
Nothing to do.

/*==== ASSEMBLE/SOLVE ====*/

/*---- PATH-FOLLOW/REFINE ETC.----*/
problem_type=0;                                                    // Three different problem types are included.
                                                                   // 0:random initial guess ---- uses random init. guess -> solve.
                                                                   // 1:path-following       ---- successively solve problems at "ipar" using previous solutions as initial guesses.
                                                                   // 2:refinement           ---- takes solution on a coarse mesh -> refine.
imode=0;                                                           // just a label of a solution branch.
ipar=(from ipar_begin to ipar_end)                                 // Used when problem_type=1. 


////////
Compile:    make main
Run    :    mpiexec -n 8 ./main -snes_monitor
Results:    Converged after 17 nonlinear iteration (~2min).
            Total free energy = 1.593320e-01.
            Solution vector is saved in "data/100/U_cube_3_2_0_0.25000000_0.50000000_180.00000000_3.25000000_0.10000000.bin".  <- You should come up with a better file name.
            See "plot/100/demo_l0.10_mref3.png"


// ---- Example 2: Take the solution computed in Example 1 and refine (mref = 3 -> 4).

Change "main.c" from Example 1 as following:

mref_base= 3;
nref=1;            // refine once.
problem_type=2;    // refinement.

////////
Compile and Run:

Results:
Converged after 14 nonlinear iteration (~13min).
Total free energy = 1.507978e-01
Solution vector is saved in "data/100/U_cube_4_2_0_0.25000000_0.50000000_180.00000000_3.25000000_0.10000000.bin".
See "plot/100/demo_l0.10_mref4.png"


// ---- Example 3: Take the solution computed in Example 2 at length-scale parameter = par_mat[4] = 0.10, and track the branch from par_mat[4]=0.10 to par_mat[4]=0.05, taking a stepsize of 0.01;

Change main.c from Example 2 as following:

problem_type=1;           // path-follow.
ipar_begin = 10000000;    // par_mat[4]=1.e-8*ipar
ipar_end   =  5000000;    //

copy the solution obtained in Example 2 as:
cp data/100/U_cube_4_2_0_0.25000000_0.50000000_180.00000000_3.25000000_0.10000000.bin data/100/U_cube_4_2_temp0.bin

data/100/U_cube_4_2_temp0.bin keeps being updated as one moves on the branch.
(Actually, we may not have to use temporal files, "data/*/U_cube_*_temp*.bin",,,but for now, let's just do it this way.)

////////
Compile:
Run    :
Results:        ~60min.
                Total free energy = 1.371165e-01. (at par_mat[4]=0.05)
                See "plot/100/demo_l0.05_mref4.png"


// ---- Example 4: Assess stability of the solution branch obtained in Example 3.
"data/100/PI_cube_4_2_0_0.25000000_0.50000000_180.00000000_3.25000000_lE.txt" includes values of length-scale parameters, par_mat[4], for which stability analysis is to be done.

////////
Compile:        make main_stab (Requires SLEPc)
Run    :        mpiexec -n 8 ./main_stab -eps_monitor
Result :        ~1 min.
                smallest eigv = 0.0071380109358256
                The value is saved in "data/100/smallestEigval_4_2_0_0.25000000_0.50000000_180.00000000_3.25000000_0.05000000.bin"

